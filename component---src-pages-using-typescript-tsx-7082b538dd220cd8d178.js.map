{"version":3,"file":"component---src-pages-using-typescript-tsx-7082b538dd220cd8d178.js","mappings":"qNAaA,MA+BaA,EAA0B,IAAMC,EAAAA,cAACC,EAAAA,EAAG,CAACC,MAAM,qBAExD,UAjCwDC,IAAAA,IAAC,KACvDC,EAAI,KACJC,EAAI,SACJC,GACD,SACCN,EAAAA,cAACO,EAAAA,EAAM,CAACL,MAAM,mBAAmBI,SAAUA,GACzCN,EAAAA,cAAAA,KAAAA,KAAI,0CACJA,EAAAA,cAAAA,IAAAA,KAAG,4CACwC,4BAAM,YAAe,0CAClC,4BAAM,YAAe,qCACzC,4BAAM,oBAAuB,MAEvCA,EAAAA,cAAAA,IAAAA,KAAG,4CACwC,0BAAI,cAAe,oBACxD,0BAAI,cAAe,gBAAa,0BAAI,YAAa,UAEvDA,EAAAA,cAAAA,IAAAA,KAAG,kCAC8BK,EAAK,uBAAqB,IACxDD,EAAKI,KAAKC,UAAU,KAEvBT,EAAAA,cAAAA,IAAAA,KAAG,kCAC+B,IAChCA,EAAAA,cAAAA,IAAAA,CAAGU,KAAK,yEAAwE,kCAE5E,KAGNV,EAAAA,cAACW,EAAAA,KAAI,CAACC,GAAG,KAAI,2BACN,C,wDCeX,IAnDe,IAAoC,IAAnC,SAAEN,EAAQ,MAAEJ,EAAK,SAAEW,GAAU,EAC3C,MACMC,EAD6B,MAChBR,EAASS,SAE5B,GAA2C,MAAvCC,aAAaC,QAAQ,eAAwB,CAC/C,MAAMC,EAAeC,OAAOC,WAAW,gCAAgCC,QAAU,OAAS,QAC1FL,aAAaM,QAAQ,cAAeJ,GACpCK,SAASC,gBAAgBC,aAAa,cAAeP,EACvD,MACEK,SAASC,gBAAgBC,aAAa,cAAeT,aAAaC,QAAQ,gBAG5E,MAAM,kBAAES,IAAsBC,EAAAA,EAAAA,YAAWC,EAAAA,GA0BzC,OAvBAC,EAAAA,EAAAA,YAAU,KACRH,EAAkB,CAACI,eAAe,EAAOC,qBAAqB,IAEvD,SAGN,IAkBD,2BACE,gBAAC,IAAG,MACJ,uBAAKC,UAAU,iBAAiB,oBAAmBlB,GAEjD,4BAAOD,IAGL,C,+CCFV,IAvCY,IAAuC,IAAD,UAArC,YAAEoB,EAAW,MAAE/B,EAAK,SAAEW,GAAU,EAC3C,MAAM,KAAEL,IAAS0B,EAAAA,EAAAA,gBAAe,cAgB1BC,EAAkBF,GAAezB,EAAK4B,aAAaH,YACnDI,EAAgC,QAApB,EAAG7B,EAAK4B,oBAAY,aAAjB,EAAmBlC,MAExC,OACE,gCACE,6BAAQmC,EAAkBnC,EAAK,MAAMmC,EAAiBnC,GACtD,wBAAMoC,KAAK,cAAcC,QAASJ,IAClC,wBAAMK,SAAS,WAAWD,QAASrC,IACnC,wBAAMsC,SAAS,iBAAiBD,QAASJ,IACzC,wBAAMK,SAAS,UAAUD,QAAQ,YACjC,wBAAMD,KAAK,eAAeC,QAAQ,YAClC,wBACED,KAAK,kBACLC,SAA0B,QAAjB,EAAA/B,EAAK4B,oBAAY,OAAQ,QAAR,EAAjB,EAAmBK,cAAM,WAAR,EAAjB,EAA2BC,UAAO,KAE7C,wBAAMJ,KAAK,gBAAgBC,QAASrC,IACpC,wBAAMoC,KAAK,sBAAsBC,QAASJ,IACzCtB,EACA,C","sources":["webpack://gatsby-starter-blog/./src/pages/using-typescript.tsx","webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js"],"sourcesContent":["// If you don't want to use TypeScript you can delete this file!\nimport * as React from \"react\"\nimport { PageProps, Link, graphql, HeadFC } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\ntype DataProps = {\n  site: {\n    buildTime: string\n  }\n}\n\nconst UsingTypescript: React.FC<PageProps<DataProps>> = ({\n  data,\n  path,\n  location,\n}) => (\n  <Layout title=\"Using TypeScript\" location={location}>\n    <h1>Gatsby supports TypeScript by default!</h1>\n    <p>\n      This means that you can create and write <code>.ts/.tsx</code> files for\n      your pages, components, and <code>gatsby-*</code> configuration files (for\n      example <code>gatsby-config.ts</code>).\n    </p>\n    <p>\n      For type checking you'll want to install <em>typescript</em> via npm and\n      run <em>tsc --init</em> to create a <em>tsconfig</em> file.\n    </p>\n    <p>\n      You're currently on the page \"{path}\" which was built on{\" \"}\n      {data.site.buildTime}.\n    </p>\n    <p>\n      To learn more, head over to our{\" \"}\n      <a href=\"https://www.gatsbyjs.com/docs/how-to/custom-configuration/typescript/\">\n        documentation about TypeScript\n      </a>\n      .\n    </p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n)\n\nexport const Head: HeadFC<DataProps> = () => <Seo title=\"Using TypeScript\" />\n\nexport default UsingTypescript\n\nexport const query = graphql`\n  {\n    site {\n      buildTime(formatString: \"YYYY-MM-DD hh:mm a z\")\n    }\n  }\n`\n","import React, { useEffect, useContext } from 'react';\n\nimport Nav from \"../components/nav\"\nimport GlobalStateContext from '../context/GlobalStateContext';\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n\n  if (localStorage.getItem('color-theme') == null) {\n    const osColorTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'\n    localStorage.setItem('color-theme', osColorTheme)\n    document.documentElement.setAttribute('color-theme', osColorTheme)\n  } else {\n    document.documentElement.setAttribute('color-theme', localStorage.getItem('color-theme'))\n  }    \n\n  const { updateGlobalState } = useContext(GlobalStateContext);\n\n\n  useEffect(() => {\n    updateGlobalState({isOpenSidebar: false, isSidebarTransition: false})   \n    \n    return () => {\n      \n    }\n  }, [])    \n\n\n  if (isRootPath) {\n    // header = (\n    //   <h1 className=\"main-heading\">\n    //     <Link to=\"/\">{title}</Link>\n    //   </h1>\n    // )\n  } else {\n    // header = (\n    //   <Link className=\"header-link-home\" to=\"/\">\n    //     {title}\n    //   </Link>\n    // )\n  }\n\n  return (\n    <div>\n      <Nav/>\n      <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n        {/* <header className=\"global-header\">{header}</header>    */}\n        <main>{children}</main>\n        {/* <footer></footer>      */}\n      </div>\n    </div>\n\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n"],"names":["Head","React","Seo","title","_ref","data","path","location","Layout","site","buildTime","href","Link","to","children","isRootPath","pathname","localStorage","getItem","osColorTheme","window","matchMedia","matches","setItem","document","documentElement","setAttribute","updateGlobalState","useContext","GlobalStateContext","useEffect","isOpenSidebar","isSidebarTransition","className","description","useStaticQuery","metaDescription","siteMetadata","defaultTitle","name","content","property","social","twitter"],"sourceRoot":""}