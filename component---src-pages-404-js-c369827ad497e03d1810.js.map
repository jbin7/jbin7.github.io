{"version":3,"file":"component---src-pages-404-js-c369827ad497e03d1810.js","mappings":"gKAwDA,IAnDe,IAAoC,IAAnC,SAAEA,EAAQ,MAAEC,EAAK,SAAEC,GAAU,EAC3C,MACMC,EAD6B,MAChBH,EAASI,UACtB,kBAAEC,IAAsBC,EAAAA,EAAAA,YAAWC,EAAAA,GAmCzC,OAhCAC,EAAAA,EAAAA,YAAU,KAER,GAA2C,MAAvCC,aAAaC,QAAQ,eAAwB,CAC/C,MAAMC,EAAeC,OAAOC,WAAW,gCAAgCC,QAAU,OAAS,QAC1FL,aAAaM,QAAQ,cAAeJ,GACpCK,SAASC,gBAAgBC,aAAa,cAAeP,EACvD,MACEK,SAASC,gBAAgBC,aAAa,cAAeT,aAAaC,QAAQ,gBAK5E,OAFAL,EAAkB,CAACc,eAAe,EAAOC,qBAAqB,IAEvD,MAEN,GACA,IAkBD,2BACE,gBAAC,IAAG,MACJ,uBAAKC,UAAU,iBAAiB,oBAAmBlB,GAEjD,4BAAOD,IAGL,C,+CCFV,IAvCY,IAAuC,IAAD,UAArC,YAAEoB,EAAW,MAAErB,EAAK,SAAEC,GAAU,EAC3C,MAAM,KAAEqB,IAASC,EAAAA,EAAAA,gBAAe,cAgB1BC,EAAkBH,GAAeC,EAAKG,aAAaJ,YACnDK,EAAgC,QAApB,EAAGJ,EAAKG,oBAAY,aAAjB,EAAmBzB,MAExC,OACE,gCACE,6BAAQ0B,EAAkB1B,EAAK,MAAM0B,EAAiB1B,GACtD,wBAAM2B,KAAK,cAAcC,QAASJ,IAClC,wBAAMK,SAAS,WAAWD,QAAS5B,IACnC,wBAAM6B,SAAS,iBAAiBD,QAASJ,IACzC,wBAAMK,SAAS,UAAUD,QAAQ,YACjC,wBAAMD,KAAK,eAAeC,QAAQ,YAClC,wBACED,KAAK,kBACLC,SAA0B,QAAjB,EAAAN,EAAKG,oBAAY,OAAQ,QAAR,EAAjB,EAAmBK,cAAM,WAAR,EAAjB,EAA2BC,UAAO,KAE7C,wBAAMJ,KAAK,gBAAgBC,QAAS5B,IACpC,wBAAM2B,KAAK,sBAAsBC,QAASJ,IACzCvB,EACA,C,kGCvCP,MAWa+B,EAAO,IAAM,gBAAC,IAAG,CAAChC,MAAM,mBAErC,UAbqB,IAAyB,IAAxB,KAAEiC,EAAI,SAAElC,GAAU,EACtC,MAAMmC,EAAYD,EAAKX,KAAKG,aAAazB,MAEzC,OACE,gBAAC,IAAM,CAACD,SAAUA,EAAUC,MAAOkC,GACjC,0BAAI,kBACJ,yBAAG,2DACI,C","sources":["webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/pages/404.js"],"sourcesContent":["import React, { useEffect, useContext } from 'react';\n\nimport Nav from \"../components/nav\"\nimport GlobalStateContext from '../context/GlobalStateContext';\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  const { updateGlobalState } = useContext(GlobalStateContext);\n\n\n  useEffect(() => {\n\n    if (localStorage.getItem('color-theme') == null) {\n      const osColorTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'\n      localStorage.setItem('color-theme', osColorTheme)\n      document.documentElement.setAttribute('color-theme', osColorTheme)\n    } else {\n      document.documentElement.setAttribute('color-theme', localStorage.getItem('color-theme'))\n    }        \n    \n    updateGlobalState({isOpenSidebar: false, isSidebarTransition: false})   \n    \n    return () => {\n      \n    }\n  }, [])    \n\n\n  if (isRootPath) {\n    // header = (\n    //   <h1 className=\"main-heading\">\n    //     <Link to=\"/\">{title}</Link>\n    //   </h1>\n    // )\n  } else {\n    // header = (\n    //   <Link className=\"header-link-home\" to=\"/\">\n    //     {title}\n    //   </Link>\n    // )\n  }\n\n  return (\n    <div>\n      <Nav/>\n      <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n        {/* <header className=\"global-header\">{header}</header>    */}\n        <main>{children}</main>\n        {/* <footer></footer>      */}\n      </div>\n    </div>\n\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst NotFoundPage = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata.title\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <h1>404: Not Found</h1>\n      <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\n    </Layout>\n  )\n}\n\nexport const Head = () => <Seo title=\"404: Not Found\" />\n\nexport default NotFoundPage\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n"],"names":["location","title","children","isRootPath","pathname","updateGlobalState","useContext","GlobalStateContext","useEffect","localStorage","getItem","osColorTheme","window","matchMedia","matches","setItem","document","documentElement","setAttribute","isOpenSidebar","isSidebarTransition","className","description","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","name","content","property","social","twitter","Head","data","siteTitle"],"sourceRoot":""}