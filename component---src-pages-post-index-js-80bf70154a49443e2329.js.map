{"version":3,"file":"component---src-pages-post-index-js-80bf70154a49443e2329.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/BlogLayout.js","webpack://gatsby-starter-blog/./src/components/PostList.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/pages/post/index.js"],"sourcesContent":["import React, { useEffect, useContext } from 'react';\n\nimport Nav from \"../components/nav\"\nimport GlobalStateContext from '../context/GlobalStateContext';\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n\n\n\n  const { globalState, updateGlobalState } = useContext(GlobalStateContext);\n\n\n  useEffect(() => {\n\n    if (localStorage.getItem('color-theme') == null) {\n      const osColorTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'\n      localStorage.setItem('color-theme', osColorTheme)\n      document.documentElement.setAttribute('color-theme', osColorTheme)\n    } else {\n      document.documentElement.setAttribute('color-theme', localStorage.getItem('color-theme'))\n    }  \n\n    updateGlobalState({colorTheme: localStorage.getItem('color-theme')})\n\n    if (window.innerWidth < 1200) {\n      updateGlobalState({isOpenSidebar: false, isSidebarTransition: false})   \n    }else {\n      updateGlobalState({isOpenSidebar: true, isSidebarTransition: false})   \n    }\n    \n\n    const handleResize = ()=> {\n      if(window.innerWidth < 1200) {      \n        updateGlobalState({isOpenSidebar: false, isSidebarTransition: true})  \n      } else {      \n        updateGlobalState({isOpenSidebar: true, isSidebarTransition: true})  \n      }\n    }    \n    \n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    }\n  }, [])  \n\n\n  if (isRootPath) {\n    // header = (\n    //   <h1 className=\"main-heading\">\n    //     <Link to=\"/\">{title}</Link>\n    //   </h1>\n    // )\n  } else {\n    // header = (\n    //   <Link className=\"header-link-home\" to=\"/\">\n    //     {title}\n    //   </Link>\n    // )\n  }\n\n  return (\n    <div>\n      <Nav/>\n      <div className={`blog-wrapper \n        ${globalState.isOpenSidebar ? 'side-open' : 'side-close'}\n        ${globalState.isOpenSidebar && globalState.isSidebarTransition ? 'open-transition' : ''}\n        ${!globalState.isOpenSidebar && globalState.isSidebarTransition ? 'close-transition' : ''}\n        `}\n        data-is-root-path={isRootPath}>\n        {/* <header className=\"global-header\">{header}</header>    */}\n        <main>{children}</main>\n        {/* <footer></footer>      */}\n      </div>\n    </div>\n\n  )\n}\n\nexport default Layout\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst BlogIndex = (props) => {\n\n  return (\n    \n    <ol className=\"post-list\" style={{ listStyle: `none` }}>\n      {props.posts.map(post => {\n        const title = post.frontmatter.title || post.fields.slug\n\n        return (\n          <li key={post.fields.slug}>\n            <article\n              className=\"post-list-item\"\n              itemScope\n              itemType=\"http://schema.org/Article\"\n            >\n              <Link to={post.fields.slug} itemProp=\"url\">\n                <div className=\"tumbnail-area\">\n                  {post.frontmatter.thumbnail ? (\n                    <img className=\"thumbnail-image\" src={post.frontmatter.thumbnail.childImageSharp.fixed.src} alt=\"thumbnail\"/>\n                  ) : (\n                    <p></p>\n                  )}                \n                </div>\n              </Link>              \n\n              <div className=\"title-area\">\n                <header>\n                  <h2>\n                    <Link to={post.fields.slug} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  <span className=\"date\">{post.frontmatter.date}</span>                        \n                </header>                      \n              </div>\n\n              \n              {/* <section>\n                <p\n                  dangerouslySetInnerHTML={{\n                    __html: post.frontmatter.description || post.excerpt,\n                  }}\n                  itemProp=\"description\"\n                />\n              </section>  */}\n              \n            </article>\n          </li>\n        )\n      })}\n    </ol>\n  )\n}\n\nexport default BlogIndex","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../../components/BlogLayout\"\nimport Seo from \"../../components/seo\"\n\nimport PostList from \"../../components/PostList\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes  \n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>        \n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <div className=\"blog-area\">\n        <PostList posts={posts}/>\n      </div>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\n/**\n * Head export to define metadata for the page\n *\n * See: https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/\n */\nexport const Head = () => <Seo title=\"All posts\" />\n\nexport const pageQuery = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n        }\n      }\n    }\n  }\n`\n"],"names":["location","title","children","isRootPath","pathname","globalState","updateGlobalState","useContext","GlobalStateContext","useEffect","localStorage","getItem","osColorTheme","window","matchMedia","matches","setItem","document","documentElement","setAttribute","colorTheme","innerWidth","isOpenSidebar","isSidebarTransition","handleResize","addEventListener","removeEventListener","className","props","style","listStyle","posts","map","post","frontmatter","fields","slug","key","itemScope","itemType","Link","to","itemProp","thumbnail","src","childImageSharp","fixed","alt","date","description","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","name","content","property","social","twitter","data","siteTitle","allMarkdownRemark","nodes","length","Head"],"sourceRoot":""}