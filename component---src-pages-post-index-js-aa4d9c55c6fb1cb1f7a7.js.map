{"version":3,"file":"component---src-pages-post-index-js-aa4d9c55c6fb1cb1f7a7.js","mappings":"uJAiDA,IAvCY,IAAuC,IAAD,UAArC,YAAEA,EAAW,MAAEC,EAAK,SAAEC,GAAU,EAC3C,MAAM,KAAEC,IAASC,EAAAA,EAAAA,gBAAe,cAgB1BC,EAAkBL,GAAeG,EAAKG,aAAaN,YACnDO,EAAgC,QAApB,EAAGJ,EAAKG,oBAAY,aAAjB,EAAmBL,MAExC,OACE,gCACE,6BAAQM,EAAkBN,EAAK,MAAMM,EAAiBN,GACtD,wBAAMO,KAAK,cAAcC,QAASJ,IAClC,wBAAMK,SAAS,WAAWD,QAASR,IACnC,wBAAMS,SAAS,iBAAiBD,QAASJ,IACzC,wBAAMK,SAAS,UAAUD,QAAQ,YACjC,wBAAMD,KAAK,eAAeC,QAAQ,YAClC,wBACED,KAAK,kBACLC,SAA0B,QAAjB,EAAAN,EAAKG,oBAAY,OAAQ,QAAR,EAAjB,EAAmBK,cAAM,WAAR,EAAjB,EAA2BC,UAAO,KAE7C,wBAAMJ,KAAK,gBAAgBC,QAASR,IACpC,wBAAMO,KAAK,sBAAsBC,QAASJ,IACzCH,EACA,C,yICYP,MAtDmBW,GAIf,sBAAIC,UAAU,YAAYC,MAAO,CAAEC,UAAU,SAC1CH,EAAMI,MAAMC,KAAIC,IACf,MAAMlB,EAAQkB,EAAKC,YAAYnB,OAASkB,EAAKE,OAAOC,KAEpD,OACE,sBAAIC,IAAKJ,EAAKE,OAAOC,MACnB,2BACER,UAAU,iBACVU,WAAS,EACTC,SAAS,6BAET,gBAAC,EAAAC,KAAI,CAACC,GAAIR,EAAKE,OAAOC,KAAMM,SAAS,OACnC,uBAAKd,UAAU,iBACZK,EAAKC,YAAYS,UAChB,uBAAKf,UAAU,kBAAkBgB,IAAKX,EAAKC,YAAYS,UAAUE,gBAAgBC,MAAMF,IAAKG,IAAI,cAEhG,2BAAK,kBAKX,uBAAKnB,UAAU,cACb,8BACE,0BACE,gBAAC,EAAAY,KAAI,CAACC,GAAIR,EAAKE,OAAOC,KAAMM,SAAS,OACnC,wBAAMA,SAAS,YAAY3B,KAG/B,wBAAMa,UAAU,QAAQK,EAAKC,YAAYc,SAe5C,KClBf,MAxBkB,IAAyB,IAAD,MAAvB,KAAEC,EAAI,SAAEC,GAAU,EACnC,MAAMC,GAAkC,QAAtB,EAAAF,EAAKhC,KAAKG,oBAAY,aAAtB,EAAwBL,QAAK,QACzCgB,EAAQkB,EAAKG,kBAAkBC,MAErC,OAAqB,IAAjBtB,EAAMuB,OAEN,uBAAK1B,UAAU,kBACb,uBAAKA,UAAU,WACb,yBAAG,oBAOT,gBAAC,IAAM,CAACsB,SAAUA,EAAUnC,MAAOoC,GACjC,uBAAKvB,UAAU,kBACb,0BAAI,aACJ,gBAAC2B,EAAQ,CAACxB,MAAOA,KAEZ,EAWN,MAAMyB,EAAO,IAAM,gBAAC,IAAG,CAACzC,MAAM,a","sources":["webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/components/PostList.js","webpack://gatsby-starter-blog/./src/pages/post/index.js"],"sourcesContent":["/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst BlogIndex = (props) => {\n\n  return (\n    \n    <ol className=\"post-list\" style={{ listStyle: `none` }}>\n      {props.posts.map(post => {\n        const title = post.frontmatter.title || post.fields.slug\n\n        return (\n          <li key={post.fields.slug}>\n            <article\n              className=\"post-list-item\"\n              itemScope\n              itemType=\"http://schema.org/Article\"\n            >\n              <Link to={post.fields.slug} itemProp=\"url\">\n                <div className=\"tumbnail-area\">\n                  {post.frontmatter.thumbnail ? (\n                    <img className=\"thumbnail-image\" src={post.frontmatter.thumbnail.childImageSharp.fixed.src} alt=\"thumbnail\"/>\n                  ) : (\n                    <div>No-thumbnail</div>\n                  )}                \n                </div>\n              </Link>              \n\n              <div className=\"title-area\">\n                <header>\n                  <h2>\n                    <Link to={post.fields.slug} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  <span className=\"date\">{post.frontmatter.date}</span>                        \n                </header>                      \n              </div>\n\n              \n              {/* <section>\n                <p\n                  dangerouslySetInnerHTML={{\n                    __html: post.frontmatter.description || post.excerpt,\n                  }}\n                  itemProp=\"description\"\n                />\n              </section>  */}\n              \n            </article>\n          </li>\n        )\n      })}\n    </ol>\n  )\n}\n\nexport default BlogIndex","import * as React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../../components/layout\"\nimport Seo from \"../../components/seo\"\n\nimport PostList from \"../../components/PostList\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes  \n\n  if (posts.length === 0) {\n    return (\n      <div className=\"post-container\">\n        <div className=\"no-post\">\n          <p>작성된 포스트가 없습니다.</p>\n        </div>          \n      </div>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <div className=\"post-container\">\n        <h3>All Posts</h3>\n        <PostList posts={posts}/>\n      </div>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\n/**\n * Head export to define metadata for the page\n *\n * See: https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/\n */\nexport const Head = () => <Seo title=\"All posts\" />\n\nexport const pageQuery = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n          thumbnail {\n            childImageSharp {\n              fixed(width: 200, height: 200) {\n                src\n              }\n            }\n          }          \n        }\n      }\n    }\n  }\n`\n"],"names":["description","title","children","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","name","content","property","social","twitter","props","className","style","listStyle","posts","map","post","frontmatter","fields","slug","key","itemScope","itemType","Link","to","itemProp","thumbnail","src","childImageSharp","fixed","alt","date","data","location","siteTitle","allMarkdownRemark","nodes","length","PostList","Head"],"sourceRoot":""}